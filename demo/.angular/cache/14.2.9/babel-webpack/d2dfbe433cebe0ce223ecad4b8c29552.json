{"ast":null,"code":"(function () {\n  var COUNT_FRAMERATE,\n      COUNT_MS_PER_FRAME,\n      DIGIT_FORMAT,\n      DIGIT_HTML,\n      DIGIT_SPEEDBOOST,\n      DURATION,\n      FORMAT_MARK_HTML,\n      FORMAT_PARSER,\n      FRAMERATE,\n      FRAMES_PER_VALUE,\n      MS_PER_FRAME,\n      MutationObserver,\n      Odometer,\n      RIBBON_HTML,\n      TRANSITION_END_EVENTS,\n      TRANSITION_SUPPORT,\n      VALUE_HTML,\n      addClass,\n      createFromHTML,\n      fractionalPart,\n      now,\n      removeClass,\n      requestAnimationFrame,\n      round,\n      transitionCheckStyles,\n      trigger,\n      truncate,\n      wrapJQuery,\n      _jQueryWrapped,\n      _old,\n      _ref,\n      _ref1,\n      __slice = [].slice;\n\n  VALUE_HTML = '<span class=\"odometer-value\"></span>';\n  RIBBON_HTML = '<span class=\"odometer-ribbon\"><span class=\"odometer-ribbon-inner\">' + VALUE_HTML + '</span></span>';\n  DIGIT_HTML = '<span class=\"odometer-digit\"><span class=\"odometer-digit-spacer\">8</span><span class=\"odometer-digit-inner\">' + RIBBON_HTML + '</span></span>';\n  FORMAT_MARK_HTML = '<span class=\"odometer-formatting-mark\"></span>';\n  DIGIT_FORMAT = '(,ddd).dd';\n  FORMAT_PARSER = /^\\(?([^)]*)\\)?(?:(.)(d+))?$/;\n  FRAMERATE = 30;\n  DURATION = 2000;\n  COUNT_FRAMERATE = 20;\n  FRAMES_PER_VALUE = 2;\n  DIGIT_SPEEDBOOST = .5;\n  MS_PER_FRAME = 1000 / FRAMERATE;\n  COUNT_MS_PER_FRAME = 1000 / COUNT_FRAMERATE;\n  TRANSITION_END_EVENTS = 'transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd';\n  transitionCheckStyles = document.createElement('div').style;\n  TRANSITION_SUPPORT = transitionCheckStyles.transition != null || transitionCheckStyles.webkitTransition != null || transitionCheckStyles.mozTransition != null || transitionCheckStyles.oTransition != null;\n  requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n  MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;\n\n  createFromHTML = function createFromHTML(html) {\n    var el;\n    el = document.createElement('div');\n    el.innerHTML = html;\n    return el.children[0];\n  };\n\n  removeClass = function removeClass(el, name) {\n    return el.className = el.className.replace(new RegExp(\"(^| )\" + name.split(' ').join('|') + \"( |$)\", 'gi'), ' ');\n  };\n\n  addClass = function addClass(el, name) {\n    removeClass(el, name);\n    return el.className += \" \" + name;\n  };\n\n  trigger = function trigger(el, name) {\n    var evt;\n\n    if (document.createEvent != null) {\n      evt = document.createEvent('HTMLEvents');\n      evt.initEvent(name, true, true);\n      return el.dispatchEvent(evt);\n    }\n  };\n\n  now = function now() {\n    var _ref, _ref1;\n\n    return (_ref = (_ref1 = window.performance) != null ? typeof _ref1.now === \"function\" ? _ref1.now() : void 0 : void 0) != null ? _ref : +new Date();\n  };\n\n  round = function round(val, precision) {\n    if (precision == null) {\n      precision = 0;\n    }\n\n    if (!precision) {\n      return Math.round(val);\n    }\n\n    val *= Math.pow(10, precision);\n    val += 0.5;\n    val = Math.floor(val);\n    return val /= Math.pow(10, precision);\n  };\n\n  truncate = function truncate(val) {\n    if (val < 0) {\n      return Math.ceil(val);\n    } else {\n      return Math.floor(val);\n    }\n  };\n\n  fractionalPart = function fractionalPart(val) {\n    return val - round(val);\n  };\n\n  _jQueryWrapped = false;\n  (wrapJQuery = function wrapJQuery() {\n    var property, _i, _len, _ref, _results;\n\n    if (_jQueryWrapped) {\n      return;\n    }\n\n    if (window.jQuery != null) {\n      _jQueryWrapped = true;\n      _ref = ['html', 'text'];\n      _results = [];\n\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        property = _ref[_i];\n\n        _results.push(function (property) {\n          var old;\n          old = window.jQuery.fn[property];\n          return window.jQuery.fn[property] = function (val) {\n            var _ref1;\n\n            if (val == null || ((_ref1 = this[0]) != null ? _ref1.odometer : void 0) == null) {\n              return old.apply(this, arguments);\n            }\n\n            return this[0].odometer.update(val);\n          };\n        }(property));\n      }\n\n      return _results;\n    }\n  })();\n  setTimeout(wrapJQuery, 0);\n\n  Odometer = function () {\n    function Odometer(options) {\n      var e,\n          k,\n          property,\n          v,\n          _base,\n          _i,\n          _len,\n          _ref,\n          _ref1,\n          _ref2,\n          _this = this;\n\n      this.options = options;\n      this.el = this.options.el;\n\n      if (this.el.odometer != null) {\n        return this.el.odometer;\n      }\n\n      this.el.odometer = this;\n      _ref = Odometer.options;\n\n      for (k in _ref) {\n        v = _ref[k];\n\n        if (this.options[k] == null) {\n          this.options[k] = v;\n        }\n      }\n\n      if ((_base = this.options).duration == null) {\n        _base.duration = DURATION;\n      }\n\n      this.MAX_VALUES = this.options.duration / MS_PER_FRAME / FRAMES_PER_VALUE | 0;\n      this.resetFormat();\n      this.value = this.cleanValue((_ref1 = this.options.value) != null ? _ref1 : '');\n      this.renderInside();\n      this.render();\n\n      try {\n        _ref2 = ['innerHTML', 'innerText', 'textContent'];\n\n        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {\n          property = _ref2[_i];\n\n          if (this.el[property] != null) {\n            (function (property) {\n              return Object.defineProperty(_this.el, property, {\n                get: function get() {\n                  var _ref3;\n\n                  if (property === 'innerHTML') {\n                    return _this.inside.outerHTML;\n                  } else {\n                    return (_ref3 = _this.inside.innerText) != null ? _ref3 : _this.inside.textContent;\n                  }\n                },\n                set: function set(val) {\n                  return _this.update(val);\n                }\n              });\n            })(property);\n          }\n        }\n      } catch (_error) {\n        e = _error;\n        this.watchForMutations();\n      }\n\n      this;\n    }\n\n    Odometer.prototype.renderInside = function () {\n      this.inside = document.createElement('div');\n      this.inside.className = 'odometer-inside';\n      this.el.innerHTML = '';\n      return this.el.appendChild(this.inside);\n    };\n\n    Odometer.prototype.watchForMutations = function () {\n      var e,\n          _this = this;\n\n      if (MutationObserver == null) {\n        return;\n      }\n\n      try {\n        if (this.observer == null) {\n          this.observer = new MutationObserver(function (mutations) {\n            var newVal;\n            newVal = _this.el.innerText;\n\n            _this.renderInside();\n\n            _this.render(_this.value);\n\n            return _this.update(newVal);\n          });\n        }\n\n        this.watchMutations = true;\n        return this.startWatchingMutations();\n      } catch (_error) {\n        e = _error;\n      }\n    };\n\n    Odometer.prototype.startWatchingMutations = function () {\n      if (this.watchMutations) {\n        return this.observer.observe(this.el, {\n          childList: true\n        });\n      }\n    };\n\n    Odometer.prototype.stopWatchingMutations = function () {\n      var _ref;\n\n      return (_ref = this.observer) != null ? _ref.disconnect() : void 0;\n    };\n\n    Odometer.prototype.cleanValue = function (val) {\n      var _ref;\n\n      if (typeof val === 'string') {\n        val = val.replace((_ref = this.format.radix) != null ? _ref : '.', '<radix>');\n        val = val.replace(/[.,]/g, '');\n        val = val.replace('<radix>', '.');\n        val = parseFloat(val, 10) || 0;\n      }\n\n      return round(val, this.format.precision);\n    };\n\n    Odometer.prototype.bindTransitionEnd = function () {\n      var event,\n          renderEnqueued,\n          _i,\n          _len,\n          _ref,\n          _results,\n          _this = this;\n\n      if (this.transitionEndBound) {\n        return;\n      }\n\n      this.transitionEndBound = true;\n      renderEnqueued = false;\n      _ref = TRANSITION_END_EVENTS.split(' ');\n      _results = [];\n\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        event = _ref[_i];\n\n        _results.push(this.el.addEventListener(event, function () {\n          if (renderEnqueued) {\n            return true;\n          }\n\n          renderEnqueued = true;\n          setTimeout(function () {\n            _this.render();\n\n            renderEnqueued = false;\n            return trigger(_this.el, 'odometerdone');\n          }, 0);\n          return true;\n        }, false));\n      }\n\n      return _results;\n    };\n\n    Odometer.prototype.resetFormat = function () {\n      var format, fractional, parsed, precision, radix, repeating, _ref, _ref1;\n\n      format = (_ref = this.options.format) != null ? _ref : DIGIT_FORMAT;\n      format || (format = 'd');\n      parsed = FORMAT_PARSER.exec(format);\n\n      if (!parsed) {\n        throw new Error(\"Odometer: Unparsable digit format\");\n      }\n\n      _ref1 = parsed.slice(1, 4), repeating = _ref1[0], radix = _ref1[1], fractional = _ref1[2];\n      precision = (fractional != null ? fractional.length : void 0) || 0;\n      return this.format = {\n        repeating: repeating,\n        radix: radix,\n        precision: precision\n      };\n    };\n\n    Odometer.prototype.render = function (value) {\n      var classes, cls, match, newClasses, theme, _i, _len;\n\n      if (value == null) {\n        value = this.value;\n      }\n\n      this.stopWatchingMutations();\n      this.resetFormat();\n      this.inside.innerHTML = '';\n      theme = this.options.theme;\n      classes = this.el.className.split(' ');\n      newClasses = [];\n\n      for (_i = 0, _len = classes.length; _i < _len; _i++) {\n        cls = classes[_i];\n\n        if (!cls.length) {\n          continue;\n        }\n\n        if (match = /^odometer-theme-(.+)$/.exec(cls)) {\n          theme = match[1];\n          continue;\n        }\n\n        if (/^odometer(-|$)/.test(cls)) {\n          continue;\n        }\n\n        newClasses.push(cls);\n      }\n\n      newClasses.push('odometer');\n\n      if (!TRANSITION_SUPPORT) {\n        newClasses.push('odometer-no-transitions');\n      }\n\n      if (theme) {\n        newClasses.push(\"odometer-theme-\" + theme);\n      } else {\n        newClasses.push(\"odometer-auto-theme\");\n      }\n\n      this.el.className = newClasses.join(' ');\n      this.ribbons = {};\n      this.formatDigits(value);\n      return this.startWatchingMutations();\n    };\n\n    Odometer.prototype.formatDigits = function (value) {\n      var digit, valueDigit, valueString, wholePart, _i, _j, _len, _len1, _ref, _ref1;\n\n      this.digits = [];\n\n      if (this.options.formatFunction) {\n        valueString = this.options.formatFunction(value);\n        _ref = valueString.split('').reverse();\n\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          valueDigit = _ref[_i];\n\n          if (valueDigit.match(/0-9/)) {\n            digit = this.renderDigit();\n            digit.querySelector('.odometer-value').innerHTML = valueDigit;\n            this.digits.push(digit);\n            this.insertDigit(digit);\n          } else {\n            this.addSpacer(valueDigit);\n          }\n        }\n      } else {\n        value = this.preservePrecision(value);\n        wholePart = !this.format.precision;\n        _ref1 = value.toString().split('').reverse();\n\n        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n          digit = _ref1[_j];\n\n          if (digit === '.') {\n            wholePart = true;\n          }\n\n          this.addDigit(digit, wholePart);\n        }\n      }\n    };\n\n    Odometer.prototype.preservePrecision = function (value) {\n      var fixedValue, i, parts, _i, _ref;\n\n      fixedValue = value;\n\n      if (this.format.precision) {\n        parts = fixedValue.toString().split('.');\n\n        if (parts.length === 1) {\n          fixedValue += '.';\n          parts[1] = '';\n        }\n\n        for (i = _i = 0, _ref = this.format.precision; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n          if (!parts[1][i]) {\n            fixedValue += '0';\n          }\n        }\n      }\n\n      return fixedValue;\n    };\n\n    Odometer.prototype.update = function (newValue) {\n      var diff,\n          _this = this;\n\n      newValue = this.cleanValue(newValue);\n\n      if (!(diff = newValue - this.value)) {\n        return;\n      }\n\n      removeClass(this.el, 'odometer-animating-up odometer-animating-down odometer-animating');\n\n      if (diff > 0) {\n        addClass(this.el, 'odometer-animating-up');\n      } else {\n        addClass(this.el, 'odometer-animating-down');\n      }\n\n      this.stopWatchingMutations();\n      this.animate(newValue);\n      this.startWatchingMutations();\n      setTimeout(function () {\n        _this.el.offsetHeight;\n        return addClass(_this.el, 'odometer-animating');\n      }, 0);\n      return this.value = newValue;\n    };\n\n    Odometer.prototype.renderDigit = function () {\n      return createFromHTML(DIGIT_HTML);\n    };\n\n    Odometer.prototype.insertDigit = function (digit, before) {\n      if (before != null) {\n        return this.inside.insertBefore(digit, before);\n      } else if (!this.inside.children.length) {\n        return this.inside.appendChild(digit);\n      } else {\n        return this.inside.insertBefore(digit, this.inside.children[0]);\n      }\n    };\n\n    Odometer.prototype.addSpacer = function (chr, before, extraClasses) {\n      var spacer;\n      spacer = createFromHTML(FORMAT_MARK_HTML);\n      spacer.innerHTML = chr;\n\n      if (extraClasses) {\n        addClass(spacer, extraClasses);\n      }\n\n      return this.insertDigit(spacer, before);\n    };\n\n    Odometer.prototype.addDigit = function (value, repeating) {\n      var chr, digit, resetted, _ref;\n\n      if (repeating == null) {\n        repeating = true;\n      }\n\n      if (value === '-') {\n        return this.addSpacer(value, null, 'odometer-negation-mark');\n      }\n\n      if (value === '.') {\n        return this.addSpacer((_ref = this.format.radix) != null ? _ref : '.', null, 'odometer-radix-mark');\n      }\n\n      if (repeating) {\n        resetted = false;\n\n        while (true) {\n          if (!this.format.repeating.length) {\n            if (resetted) {\n              throw new Error(\"Bad odometer format without digits\");\n            }\n\n            this.resetFormat();\n            resetted = true;\n          }\n\n          chr = this.format.repeating[this.format.repeating.length - 1];\n          this.format.repeating = this.format.repeating.substring(0, this.format.repeating.length - 1);\n\n          if (chr === 'd') {\n            break;\n          }\n\n          this.addSpacer(chr);\n        }\n      }\n\n      digit = this.renderDigit();\n      digit.querySelector('.odometer-value').innerHTML = value;\n      this.digits.push(digit);\n      return this.insertDigit(digit);\n    };\n\n    Odometer.prototype.animate = function (newValue) {\n      if (!TRANSITION_SUPPORT || this.options.animation === 'count') {\n        return this.animateCount(newValue);\n      } else {\n        return this.animateSlide(newValue);\n      }\n    };\n\n    Odometer.prototype.animateCount = function (newValue) {\n      var cur,\n          diff,\n          last,\n          start,\n          _tick,\n          _this = this;\n\n      if (!(diff = +newValue - this.value)) {\n        return;\n      }\n\n      start = last = now();\n      cur = this.value;\n      return (_tick = function tick() {\n        var delta, dist, fraction;\n\n        if (now() - start > _this.options.duration) {\n          _this.value = newValue;\n\n          _this.render();\n\n          trigger(_this.el, 'odometerdone');\n          return;\n        }\n\n        delta = now() - last;\n\n        if (delta > COUNT_MS_PER_FRAME) {\n          last = now();\n          fraction = delta / _this.options.duration;\n          dist = diff * fraction;\n          cur += dist;\n\n          _this.render(Math.round(cur));\n        }\n\n        if (requestAnimationFrame != null) {\n          return requestAnimationFrame(_tick);\n        } else {\n          return setTimeout(_tick, COUNT_MS_PER_FRAME);\n        }\n      })();\n    };\n\n    Odometer.prototype.getDigitCount = function () {\n      var i, max, value, values, _i, _len;\n\n      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n\n      for (i = _i = 0, _len = values.length; _i < _len; i = ++_i) {\n        value = values[i];\n        values[i] = Math.abs(value);\n      }\n\n      max = Math.max.apply(Math, values);\n      return Math.ceil(Math.log(max + 1) / Math.log(10));\n    };\n\n    Odometer.prototype.getFractionalDigitCount = function () {\n      var i, parser, parts, value, values, _i, _len;\n\n      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      parser = /^\\-?\\d*\\.(\\d*?)0*$/;\n\n      for (i = _i = 0, _len = values.length; _i < _len; i = ++_i) {\n        value = values[i];\n        values[i] = value.toString();\n        parts = parser.exec(values[i]);\n\n        if (parts == null) {\n          values[i] = 0;\n        } else {\n          values[i] = parts[1].length;\n        }\n      }\n\n      return Math.max.apply(Math, values);\n    };\n\n    Odometer.prototype.resetDigits = function () {\n      this.digits = [];\n      this.ribbons = [];\n      this.inside.innerHTML = '';\n      return this.resetFormat();\n    };\n\n    Odometer.prototype.animateSlide = function (newValue) {\n      var boosted, cur, diff, digitCount, digits, dist, end, fractionalCount, frame, frames, i, incr, j, mark, numEl, oldValue, start, _base, _i, _j, _k, _l, _len, _len1, _len2, _m, _ref, _results;\n\n      oldValue = this.value;\n      fractionalCount = this.format.precision;\n\n      if (fractionalCount) {\n        newValue = newValue * Math.pow(10, fractionalCount);\n        oldValue = oldValue * Math.pow(10, fractionalCount);\n      }\n\n      if (!(diff = newValue - oldValue)) {\n        return;\n      }\n\n      this.bindTransitionEnd();\n      digitCount = this.getDigitCount(oldValue, newValue);\n      digits = [];\n      boosted = 0;\n\n      for (i = _i = 0; 0 <= digitCount ? _i < digitCount : _i > digitCount; i = 0 <= digitCount ? ++_i : --_i) {\n        start = truncate(oldValue / Math.pow(10, digitCount - i - 1));\n        end = truncate(newValue / Math.pow(10, digitCount - i - 1));\n        dist = end - start;\n\n        if (Math.abs(dist) > this.MAX_VALUES) {\n          frames = [];\n          incr = dist / (this.MAX_VALUES + this.MAX_VALUES * boosted * DIGIT_SPEEDBOOST);\n          cur = start;\n\n          while (dist > 0 && cur < end || dist < 0 && cur > end) {\n            frames.push(Math.round(cur));\n            cur += incr;\n          }\n\n          if (frames[frames.length - 1] !== end) {\n            frames.push(end);\n          }\n\n          boosted++;\n        } else {\n          frames = function () {\n            _results = [];\n\n            for (var _j = start; start <= end ? _j <= end : _j >= end; start <= end ? _j++ : _j--) {\n              _results.push(_j);\n            }\n\n            return _results;\n          }.apply(this);\n        }\n\n        for (i = _k = 0, _len = frames.length; _k < _len; i = ++_k) {\n          frame = frames[i];\n          frames[i] = Math.abs(frame % 10);\n        }\n\n        digits.push(frames);\n      }\n\n      this.resetDigits();\n      _ref = digits.reverse();\n\n      for (i = _l = 0, _len1 = _ref.length; _l < _len1; i = ++_l) {\n        frames = _ref[i];\n\n        if (!this.digits[i]) {\n          this.addDigit(' ', i >= fractionalCount);\n        }\n\n        if ((_base = this.ribbons)[i] == null) {\n          _base[i] = this.digits[i].querySelector('.odometer-ribbon-inner');\n        }\n\n        this.ribbons[i].innerHTML = '';\n\n        if (diff < 0) {\n          frames = frames.reverse();\n        }\n\n        for (j = _m = 0, _len2 = frames.length; _m < _len2; j = ++_m) {\n          frame = frames[j];\n          numEl = document.createElement('div');\n          numEl.className = 'odometer-value';\n          numEl.innerHTML = frame;\n          this.ribbons[i].appendChild(numEl);\n\n          if (j === frames.length - 1) {\n            addClass(numEl, 'odometer-last-value');\n          }\n\n          if (j === 0) {\n            addClass(numEl, 'odometer-first-value');\n          }\n        }\n      }\n\n      if (start < 0) {\n        this.addDigit('-');\n      }\n\n      mark = this.inside.querySelector('.odometer-radix-mark');\n\n      if (mark != null) {\n        mark.parent.removeChild(mark);\n      }\n\n      if (fractionalCount) {\n        return this.addSpacer(this.format.radix, this.digits[fractionalCount - 1], 'odometer-radix-mark');\n      }\n    };\n\n    return Odometer;\n  }();\n\n  Odometer.options = (_ref = window.odometerOptions) != null ? _ref : {};\n  setTimeout(function () {\n    var k, v, _base, _ref1, _results;\n\n    if (window.odometerOptions) {\n      _ref1 = window.odometerOptions;\n      _results = [];\n\n      for (k in _ref1) {\n        v = _ref1[k];\n\n        _results.push((_base = Odometer.options)[k] != null ? (_base = Odometer.options)[k] : _base[k] = v);\n      }\n\n      return _results;\n    }\n  }, 0);\n\n  Odometer.init = function () {\n    var el, elements, _i, _len, _ref1, _results;\n\n    if (document.querySelectorAll == null) {\n      return;\n    }\n\n    elements = document.querySelectorAll(Odometer.options.selector || '.odometer');\n    _results = [];\n\n    for (_i = 0, _len = elements.length; _i < _len; _i++) {\n      el = elements[_i];\n\n      _results.push(el.odometer = new Odometer({\n        el: el,\n        value: (_ref1 = el.innerText) != null ? _ref1 : el.textContent\n      }));\n    }\n\n    return _results;\n  };\n\n  if (((_ref1 = document.documentElement) != null ? _ref1.doScroll : void 0) != null && document.createEventObject != null) {\n    _old = document.onreadystatechange;\n\n    document.onreadystatechange = function () {\n      if (document.readyState === 'complete' && Odometer.options.auto !== false) {\n        Odometer.init();\n      }\n\n      return _old != null ? _old.apply(this, arguments) : void 0;\n    };\n  } else {\n    document.addEventListener('DOMContentLoaded', function () {\n      if (Odometer.options.auto !== false) {\n        return Odometer.init();\n      }\n    }, false);\n  }\n\n  if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return Odometer;\n    });\n  } else if (typeof exports !== \"undefined\" && exports !== null) {\n    module.exports = Odometer;\n  } else {\n    window.Odometer = Odometer;\n  }\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}